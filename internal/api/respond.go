package api

import (
	"binance_tg/internal/models"
	"bytes"
	"encoding/json"
	"github.com/adshao/go-binance/v2"
	"log"
	"net/http"
	"strconv"
	"time"
)

var (
	apiKey    = ""
	secretKey = " "
	client    = binance.NewClient(apiKey, secretKey)
	symbol    = "BTCUSDT"
	interval  = "1s"
	limit     = 100
	isRunning = false
)

func Respond(botUrl string, update models.Update) error {
	var botMessage models.BotMessage
	botMessage.ChatId = update.Message.Chat.ChatId
	if update.Message.Text == "/start" {
		if isRunning {
			botMessage.Text = "MACD —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ."
		} else {
			botMessage.Text = "MACD –∑–∞–ø—É—â–µ–Ω–æ."
			isRunning = true
			go GetMACDLoop(botUrl, int64(botMessage.ChatId)) // –ó–∞–ø—É—Å–∫–∞–µ–º GetMACD –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
		}
	} else if update.Message.Text == "/stop" {
		if isRunning {
			botMessage.Text = "MACD –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
			isRunning = false
		} else {
			botMessage.Text = "MACD —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
		}
	} else {
		botMessage.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
	}

	buf, err := json.Marshal(botMessage)
	if err != nil {
		return err
	}
	_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
	if err != nil {
		return err
	}
	return nil
}

func GetMACDLoop(botUrl string, chatID int64) {
	for isRunning {
		macdValue := GetMACD(client, symbol, interval, limit)
		var botMessage models.BotMessage
		if macdValue > 0 {
			botMessage = models.BotMessage{
				ChatId: int(chatID),
				Text:   strconv.FormatFloat(macdValue, 'f', -1, 64) + " üü¢",
			}
		} else {
			botMessage = models.BotMessage{
				ChatId: int(chatID),
				Text:   strconv.FormatFloat(macdValue, 'f', -1, 64) + " üî¥",
			}
		}
		buf, err := json.Marshal(botMessage)
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			continue
		}
		_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
		if err != nil {
			log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
		}

		time.Sleep(time.Second) // –ü–æ–¥–æ–∂–¥–∞—Ç—å 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
	}
}
