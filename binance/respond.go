package binance

import (
	"binance_tg/models"
	"bytes"
	"encoding/json"
	"github.com/adshao/go-binance/v2"
	"log"
	"net/http"
	"strconv"
	"sync"
	"time"
)

type UserState struct {
	IsRunning     bool
	PrevMACDValue float64
	IsFirstRun    bool
	IsAuthorized  bool
}

var (
	apiKey     = ""
	secretKey  = ""
	client     = binance.NewClient(apiKey, secretKey)
	symbol     = "BTCUSDT"
	password   = "0214234"
	interval   = "1s"
	limit      = 100
	userStates = make(map[int64]*UserState) // –•—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
	mu         sync.Mutex
)

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func getUserState(chatID int64) *UserState {
	mu.Lock()
	defer mu.Unlock()

	state, ok := userStates[chatID]
	if !ok {
		// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		state = &UserState{IsFirstRun: true}
		userStates[chatID] = state
	}

	return state
}

// –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –æ—Å—Ç–∞–µ—Ç—Å—è –Ω–µ–∏–∑–º–µ–Ω–Ω—ã–º
// ...

func checkAuthorization(chatID int64) bool {
	state := getUserState(chatID)
	return state.IsAuthorized
}

func setAuthorization(chatID int64, authorized bool) {
	state := getUserState(chatID)
	state.IsAuthorized = authorized
}

func setRunning(chatID int64, running bool) {
	state := getUserState(chatID)
	state.IsRunning = running
}

func setPrevMACDValue(chatID int64, value float64) {
	state := getUserState(chatID)
	state.PrevMACDValue = value
}

func setFirstRun(chatID int64, isFirstRun bool) {
	state := getUserState(chatID)
	state.IsFirstRun = isFirstRun
}

func Respond(botUrl string, update models.Update) error {
	var botMessage models.BotMessage
	botMessage.ChatId = update.Message.Chat.ChatId

	state := getUserState(int64(botMessage.ChatId))

	switch update.Message.Text {
	case "/start":
		if state.IsAuthorized {
			botMessage.Text = "–ü—Ä–∏–≤–µ—Ç! üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MACD Notifier Bot! üìà\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ MACD –Ω–∞ –±–∏—Ä–∂–µ Binance.\n\nüöÄ –ö–æ–º–∞–Ω–¥—ã: \n- /launch - –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ MACD –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –∑–µ–ª–µ–Ω—É—é –∏ –æ–±—Ä–∞—Ç–Ω–æ.\n /red - –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ MACD –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –∫—Ä–∞—Å–Ω—É—é.\n /green - –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ MACD –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –∑–µ–ª–µ–Ω—É—é.\n /stop - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
		} else {
			botMessage.Text = "–ü—Ä–∏–≤–µ—Ç! üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MACD Notifier Bot! üìà\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ MACD –Ω–∞ –±–∏—Ä–∂–µ Binance. üöÄ\n\n–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: üîê"
		}
	case "/launch":
		if !checkAuthorization(int64(botMessage.ChatId)) {
			botMessage.Text = "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: üîê"
			break
		}
		if state.IsRunning {
			botMessage.Text = "MACD Notifier —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
		} else {
			botMessage.Text = "MACD Notifier –∑–∞–ø—É—â–µ–Ω! üìà\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ MACD. üöÄ\n\n"
			setRunning(int64(botMessage.ChatId), true)

			if state.IsFirstRun {
				currentMACD := GetMACD(client, symbol, interval, limit)
				if currentMACD > 0 {
					botMessage.Text += "–°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∑–µ–ª–µ–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üü¢\n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:" + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				} else {
					botMessage.Text += "–°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üî¥\n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ:" + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				}
				setFirstRun(int64(botMessage.ChatId), false)
			}

			go GetMACDLoop(botUrl, int64(botMessage.ChatId))
		}
	case "/red":
		if !checkAuthorization(int64(botMessage.ChatId)) {
			botMessage.Text = "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: üîê"
			break
		}

		if state.IsRunning {
			botMessage.Text = "MACD Notifier —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
		} else {
			botMessage.Text = "MACD Notifier –∑–∞–ø—É—â–µ–Ω! üìà\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ MACD –∫–æ–≥–¥–∞ –æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –∫—Ä–∞—Å–Ω—É—é. üöÄ\n\n"
			setRunning(int64(botMessage.ChatId), true)

			if state.IsFirstRun {
				currentMACD := GetMACD(client, symbol, interval, limit)
				if currentMACD < 0 {
					botMessage.Text += "–°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üî¥\n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				} else {
					botMessage.Text += "–°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∑–µ–ª–µ–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üü¢\n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				}
				setFirstRun(int64(botMessage.ChatId), false)
			}

			go GetMACDLoopRed(botUrl, int64(botMessage.ChatId))
		}
	case "/green":
		if !checkAuthorization(int64(botMessage.ChatId)) {
			botMessage.Text = "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: üîê"
			break
		}

		if state.IsRunning {
			botMessage.Text = "MACD Notifier —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
		} else {
			botMessage.Text = "MACD Notifier –∑–∞–ø—É—â–µ–Ω! üìà\n\n–¢–µ–ø–µ—Ä—å —è –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ MACD –∫–æ–≥–¥–∞ –æ–Ω –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –∑–µ–ª–µ–Ω—É—é. üöÄ\n\n"
			setRunning(int64(botMessage.ChatId), true)

			if state.IsFirstRun {
				currentMACD := GetMACD(client, symbol, interval, limit)
				if currentMACD > 0 {
					botMessage.Text += "–°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∑–µ–ª–µ–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üü¢\n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				} else {
					botMessage.Text += "–°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üî¥\n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				}
				setFirstRun(int64(botMessage.ChatId), false)
			}

			go GetMACDLoopGreen(botUrl, int64(botMessage.ChatId))
		}
	case "/stop":
		if state.IsRunning {
			setRunning(int64(botMessage.ChatId), false)
			botMessage.Text = "MACD Notifier –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω."
			setFirstRun(int64(botMessage.ChatId), true)
		} else if !checkAuthorization(int64(botMessage.ChatId)) {
			botMessage.Text = "–°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É: üîê"
			break
		} else {
			botMessage.Text = "MACD Notifier –Ω–µ –∑–∞–ø—É—â–µ–Ω —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å."
		}
	default:
		if !checkAuthorization(int64(botMessage.ChatId)) && update.Message.Text == password {
			setAuthorization(int64(botMessage.ChatId), true)
			go func() {
				time.Sleep(5 * time.Minute)
				setAuthorization(int64(botMessage.ChatId), false)
				log.Println("–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —Å–±—Ä–æ—à–µ–Ω–∞.")
			}()
			botMessage.Text = "‚úÖ –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! \n\n üöÄ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: \n /launch - –ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç –∏ —É–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ MACD –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –∑–µ–ª–µ–Ω—É—é –∏ –æ–±—Ä–∞—Ç–Ω–æ.\n /red - –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ MACD –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å –∑–µ–ª–µ–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –∫—Ä–∞—Å–Ω—É—é.\n /green - –£–≤–µ–¥–æ–º–ª—è–µ—Ç –≤–∞—Å, –∫–æ–≥–¥–∞ –∑–Ω–∞—á–µ–Ω–∏–µ MACD –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç —Å –∫—Ä–∞—Å–Ω–æ–π –∑–æ–Ω—ã –Ω–∞ –∑–µ–ª–µ–Ω—É—é.\n /stop - –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ."
		} else if !checkAuthorization(int64(botMessage.ChatId)) {
			botMessage.Text = "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
		} else {
			botMessage.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
		}
	}

	buf, err := json.Marshal(botMessage)
	if err != nil {
		return err
	}
	_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
	if err != nil {
		return err
	}
	return nil
}

func GetMACDLoop(botUrl string, chatID int64) {
	state := getUserState(chatID)

	for state.IsRunning {
		macdValue := GetMACD(client, symbol, interval, limit)

		if (macdValue > 0 && state.PrevMACDValue <= 0) || (macdValue <= 0 && state.PrevMACDValue > 0) {
			var botMessage models.BotMessage
			if macdValue > 0 {
				botMessage = models.BotMessage{
					ChatId: int(chatID),
					Text:   "–ó–Ω–∞—á–µ–Ω–∏–µ MACD –ø–æ–¥–Ω—è–ª–æ—Å—å –Ω–∞ –∑–µ–ª–µ–Ω—É—é –æ—Ç–º–µ—Ç–∫—É üü¢ \n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + strconv.FormatFloat(macdValue, 'f', -1, 64),
				}
			} else {
				botMessage = models.BotMessage{
					ChatId: int(chatID),
					Text:   "–ó–Ω–∞—á–µ–Ω–∏–µ MACD –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –æ—Ç–º–µ—Ç–∫—É üî¥ \n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + strconv.FormatFloat(macdValue, 'f', -1, 64),
				}
			}
			buf, err := json.Marshal(botMessage)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				continue
			}
			_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}
		}

		setPrevMACDValue(chatID, macdValue)

		time.Sleep(time.Second / 2)
	}
}

func GetMACDLoopRed(botUrl string, chatID int64) {
	state := getUserState(chatID)

	for state.IsRunning {
		macdValue := GetMACD(client, symbol, interval, limit)

		if macdValue < 0 && state.PrevMACDValue > 0 {
			var botMessage models.BotMessage

			botMessage = models.BotMessage{
				ChatId: int(chatID),
				Text:   "–ó–Ω–∞—á–µ–Ω–∏–µ MACD –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –Ω–∞ –∫—Ä–∞—Å–Ω—É—é –æ—Ç–º–µ—Ç–∫—É üî¥\n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + strconv.FormatFloat(macdValue, 'f', -1, 64),
			}

			buf, err := json.Marshal(botMessage)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				continue
			}
			_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}
		}

		setPrevMACDValue(chatID, macdValue)

		time.Sleep(time.Second / 2)
	}
}

func GetMACDLoopGreen(botUrl string, chatID int64) {
	state := getUserState(chatID)

	for state.IsRunning {
		macdValue := GetMACD(client, symbol, interval, limit)

		if macdValue > 0 && state.PrevMACDValue <= 0 {
			var botMessage models.BotMessage

			botMessage = models.BotMessage{
				ChatId: int(chatID),
				Text:   "–ó–Ω–∞—á–µ–Ω–∏–µ MACD –ø–æ–¥–Ω—è–ª–æ—Å—å –Ω–∞ –∑–µ–ª–µ–Ω—É—é –æ—Ç–º–µ—Ç–∫—É üü¢\n" + "–¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: " + strconv.FormatFloat(macdValue, 'f', -1, 64),
			}

			buf, err := json.Marshal(botMessage)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				continue
			}
			_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}
		}

		setPrevMACDValue(chatID, macdValue)

		time.Sleep(time.Second / 2)
	}
}
