package binance

import (
	"binance_tg/models"
	"bytes"
	"encoding/json"
	"github.com/adshao/go-binance/v2"
	"log"
	"net/http"
	"strconv"
	"time"
)

var (
	apiKey        = ""
	secretKey     = ""
	client        = binance.NewClient(apiKey, secretKey)
	symbol        = "BTCUSDT"
	interval      = "1s"
	limit         = 100
	isRunning     = false
	lastSign      = 0
	prevMACDValue float64
	isFirstRun    = true
)

func Respond(botUrl string, update models.Update) error {
	var botMessage models.BotMessage
	botMessage.ChatId = update.Message.Chat.ChatId

	switch update.Message.Text {
	case "/start":
		botMessage.Text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ MACD. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–≤–µ–¥–∏ –∫–æ–º–∞–Ω–¥—É /launch."
	case "/launch":
		if isRunning {
			botMessage.Text = "MACD —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ."
		} else {
			botMessage.Text = "MACD –∑–∞–ø—É—â–µ–Ω–æ."
			isRunning = true

			if isFirstRun {
				// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º MACD —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
				currentMACD := GetMACD(client, symbol, interval, limit)
				if currentMACD > 0 {
					botMessage.Text += " –°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∑–µ–ª–µ–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üü¢ " + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				} else {
					botMessage.Text += " –°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üî¥ " + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				}
				isFirstRun = false
			}

			go GetMACDLoop(botUrl, int64(botMessage.ChatId)) // –ó–∞–ø—É—Å–∫–∞–µ–º GetMACD –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–π –≥–æ—Ä—É—Ç–∏–Ω–µ
		}
	case "/stop":
		if isRunning {
			isRunning = false
			botMessage.Text = "MACD –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
			isFirstRun = false
		} else {
			botMessage.Text = "MACD —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
		}
	default:
		botMessage.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
	}

	buf, err := json.Marshal(botMessage)
	if err != nil {
		return err
	}
	_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
	if err != nil {
		return err
	}
	return nil
}

func GetMACDLoop(botUrl string, chatID int64) {
	for isRunning {
		macdValue := GetMACD(client, symbol, interval, limit)

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª—Å—è –ª–∏ –∑–Ω–∞–∫ MACD
		if (macdValue > 0 && prevMACDValue <= 0) || (macdValue <= 0 && prevMACDValue > 0) {
			var botMessage models.BotMessage
			if macdValue > 0 {
				botMessage = models.BotMessage{
					ChatId: int(chatID),
					Text:   "–ó–Ω–∞—á–µ–Ω–∏–µ macd –ø–æ–¥–Ω—è–ª—Å—è –Ω–∞ –∑–µ–ª–µ–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üü¢ " + strconv.FormatFloat(macdValue, 'f', -1, 64),
				}
			} else {
				botMessage = models.BotMessage{
					ChatId: int(chatID),
					Text:   "–ó–Ω–∞—á–µ–Ω–∏–µ macd –æ–ø—É—Å—Ç–∏–ª—Å—è –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üî¥ " + strconv.FormatFloat(macdValue, 'f', -1, 64),
				}
			}
			buf, err := json.Marshal(botMessage)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				continue
			}
			_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}
		}

		prevMACDValue = macdValue

		time.Sleep(time.Second / 2) // –ü–æ–¥–æ–∂–¥–∞—Ç—å 1 —Å–µ–∫—É–Ω–¥—É –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
	}
}
