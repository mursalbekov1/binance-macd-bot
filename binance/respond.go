package binance

import (
	"binance_tg/models"
	"bytes"
	"encoding/json"
	"github.com/adshao/go-binance/v2"
	"log"
	"net/http"
	"strconv"
	"time"
)

var (
	apiKey        = ""
	secretKey     = ""
	client        = binance.NewClient(apiKey, secretKey)
	symbol        = "BTCUSDT"
	interval      = "1s"
	limit         = 100
	isRunning     = false
	prevMACDValue float64
	isFirstRun    = true
	password      = "0214234"
	isAuthorized  = false
)

func checkAuthorization() bool {
	return isAuthorized
}

func Respond(botUrl string, update models.Update) error {
	var botMessage models.BotMessage
	botMessage.ChatId = update.Message.Chat.ChatId

	switch update.Message.Text {
	case "/start":
		if isAuthorized {
			botMessage.Text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ MACD. –î–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /launch."
		} else {
			botMessage.Text = "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∑–Ω–∞—á–µ–Ω–∏–∏ MACD. –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É:"
		}
	case "/launch":
		if !checkAuthorization() {
			botMessage.Text = "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
			break
		}

		if isRunning {
			botMessage.Text = "MACD —É–∂–µ –∑–∞–ø—É—â–µ–Ω–æ."
		} else {
			botMessage.Text = "MACD –∑–∞–ø—É—â–µ–Ω–æ."
			isRunning = true

			if isFirstRun {
				currentMACD := GetMACD(client, symbol, interval, limit)
				if currentMACD > 0 {
					botMessage.Text += " –°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∑–µ–ª–µ–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üü¢ " + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				} else {
					botMessage.Text += " –°–µ–π—á–∞—Å –∑–Ω–∞—á–µ–Ω–∏–µ MACD –Ω–∞ –∫—Ä–∞—Å–Ω–æ–π –æ—Ç–º–µ—Ç–∫–µ üî¥ " + strconv.FormatFloat(currentMACD, 'f', -1, 64)
				}
				isFirstRun = false
			}

			go GetMACDLoop(botUrl, int64(botMessage.ChatId))
		}
	case "/stop":
		if !checkAuthorization() {
			botMessage.Text = "üîê –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å."
			break
		}

		if isRunning {
			isRunning = false
			botMessage.Text = "MACD –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
			isFirstRun = false
		} else {
			botMessage.Text = "MACD —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ."
		}
	default:
		if !checkAuthorization() && update.Message.Text == password {
			isAuthorized = true
			botMessage.Text = "‚ú® –ü–∞—Ä–æ–ª—å –ø—Ä–∏–Ω—è—Ç! –¢–µ–ø–µ—Ä—å —É –≤–∞—Å –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞. –î–ª—è —Å—Ç–∞—Ä—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /launch ‚úàÔ∏è."
		} else if !checkAuthorization() {
			botMessage.Text = "üîí –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞."
		} else {
			botMessage.Text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
		}
	}

	buf, err := json.Marshal(botMessage)
	if err != nil {
		return err
	}
	_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
	if err != nil {
		return err
	}
	return nil
}

func GetMACDLoop(botUrl string, chatID int64) {
	for isRunning {
		macdValue := GetMACD(client, symbol, interval, limit)

		if (macdValue > 0 && prevMACDValue <= 0) || (macdValue <= 0 && prevMACDValue > 0) {
			var botMessage models.BotMessage
			if macdValue > 0 {
				botMessage = models.BotMessage{
					ChatId: int(chatID),
					Text:   "–ó–Ω–∞—á–µ–Ω–∏–µ MACD –ø–æ–¥–Ω—è–ª–æ—Å—å –Ω–∞ –∑–µ–ª–µ–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üü¢ " + strconv.FormatFloat(macdValue, 'f', -1, 64),
				}
			} else {
				botMessage = models.BotMessage{
					ChatId: int(chatID),
					Text:   "–ó–Ω–∞—á–µ–Ω–∏–µ MACD –æ–ø—É—Å—Ç–∏–ª–æ—Å—å –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å üî¥ " + strconv.FormatFloat(macdValue, 'f', -1, 64),
				}
			}
			buf, err := json.Marshal(botMessage)
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∞—Ä—à–∞–ª–∏–Ω–≥–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
				continue
			}
			_, err = http.Post(botUrl+"/sendMessage", "application/json", bytes.NewBuffer(buf))
			if err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:", err)
			}
		}

		prevMACDValue = macdValue

		time.Sleep(time.Second / 2)
	}
}
